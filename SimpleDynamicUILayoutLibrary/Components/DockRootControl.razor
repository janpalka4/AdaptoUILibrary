@inject DragTemp dragTemp


<div class="control-root-up" @ondrop="() => OnDrop(DockDirection.TOP)" ondragover="event.preventDefault()"><img src="_content/SimpleDockUILayoutLibrary/img/Up.svg" /></div>
<div class="control-root-down" @ondrop="() => OnDrop(DockDirection.BOTTOM)" ondragover="event.preventDefault()"><img src="_content/SimpleDockUILayoutLibrary/img/Down.svg" /></div>
<div class="control-root-left" @ondrop="() => OnDrop(DockDirection.LEFT)" ondragover="event.preventDefault()"><img src="_content/SimpleDockUILayoutLibrary/img/Left.svg" /></div>
<div class="control-root-right" @ondrop="() => OnDrop(DockDirection.RIGHT)" ondragover="event.preventDefault()"><img src="_content/SimpleDockUILayoutLibrary/img/Right.svg" /></div>

@code {
    [Parameter]
    public EventCallback<ContentDroppedEventArgs> OnContentDropped { get; set; }

    private async void OnDrop(DockDirection direction)
    {
        if (OnContentDropped.HasDelegate)
            await OnContentDropped.InvokeAsync(new ContentDroppedEventArgs() { DockContent = dragTemp.Item!, DockDirection = direction });
    }
}
